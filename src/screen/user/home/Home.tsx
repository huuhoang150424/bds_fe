import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { IoIosSearch } from 'react-icons/io';
import { IoLocationOutline } from 'react-icons/io5';
import { MdKeyboardArrowUp, MdKeyboardArrowDown } from 'react-icons/md';
import { useState } from 'react';

import CustomImage from '@/components/common/images';
import { MessageSquare } from 'lucide-react';
import { Checkbox } from '@/components/ui/checkbox';
import { X } from 'lucide-react';
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Slider } from "@/components/ui/slider";
import { cn } from "@/lib/utils";

interface NewsItem {
  title: string;
  time: string;
  img: string;
  description?: string;
}

interface NewsData {
  [key: string]: NewsItem[];
}

function Home() {
  const [show, setShow] = useState(false);
  const [selectedCity, setSelectedCity] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [showPropertyTypes, setShowPropertyTypes] = useState(false);
  const [selectedPropertyTypes, setSelectedPropertyTypes] = useState<string[]>([]);
  const [showPriceFilter, setShowPriceFilter] = useState(false);
  const [priceRange, setPriceRange] = useState<[number, number]>([0, 20]);
  const [selectedPriceOption, setSelectedPriceOption] = useState<string>("all");
  const [minPrice, setMinPrice] = useState("");
  const [maxPrice, setMaxPrice] = useState("");
  const [showAreaFilter, setShowAreaFilter] = useState(false);
  const [selectedAreaOption, setSelectedAreaOption] = useState<string>("all");
  const [minArea, setMinArea] = useState("");
  const [maxArea, setMaxArea] = useState("");
  const [activeTab, setActiveTab] = useState('nha-dat-ban');

  const featuredCities = [
    {
      name: 'H√† N·ªôi',
      image: '/images/hanoi.jpg',
    },
    {
      name: 'H·ªì Ch√≠ Minh',
      image: '/images/hochiminh.jpg',
    },
    {
      name: 'ƒê√† N·∫µng',
      image: '/images/danang.jpg',
    },
    {
      name: 'B√¨nh D∆∞∆°ng',
      image: '/images/binhduong.jpg',
    },
    {
      name: 'ƒê·ªìng Nai',
      image: '/images/dongnai.jpg',
    },
    {
      name: 'Kh√°nh H√≤a',
      image: '/images/khanhhoa.jpg',
    },
  ];

  const allCities = [
    'An Giang',
    'B√† R·ªãa V≈©ng T√†u',
    'B·∫Øc Giang',
    'B·∫Øc K·∫°n',
    'B·∫°c Li√™u',
    'B·∫Øc Ninh',
    'B·∫øn Tre',
    'B√¨nh ƒê·ªãnh',
    'B√¨nh D∆∞∆°ng',
    'B√¨nh Ph∆∞·ªõc',
    'B√¨nh Thu·∫≠n',
    'C√† Mau',
    'C·∫ßn Th∆°',
    'Cao B·∫±ng',
    'ƒê√† N·∫µng',
    'ƒê·∫Øk L·∫Øk',
    'ƒê·∫Øk N√¥ng',
    'ƒêi·ªán Bi√™n',
    'ƒê·ªìng Nai',
    'ƒê·ªìng Th√°p',
    'Gia Lai',
    'H√† Giang',
    'H√† Nam',
    'H√† N·ªôi',
    'H√† Tƒ©nh',
    'H·∫£i D∆∞∆°ng',
    'H·∫£i Ph√≤ng',
    'H·∫≠u Giang',
    'H√≤a B√¨nh',
    'H∆∞ng Y√™n',
    'Kh√°nh H√≤a',
    'Ki√™n Giang',
    'Kon Tum',
    'Lai Ch√¢u',
    'L√¢m ƒê·ªìng',
    'L·∫°ng S∆°n',
    'L√†o Cai',
    'Long An',
    'Nam ƒê·ªãnh',
    'Ngh·ªá An',
    'Ninh B√¨nh',
    'Ninh Thu·∫≠n',
    'Ph√∫ Th·ªç',
    'Ph√∫ Y√™n',
    'Qu·∫£ng B√¨nh',
    'Qu·∫£ng Nam',
    'Qu·∫£ng Ng√£i',
    'Qu·∫£ng Ninh',
    'Qu·∫£ng Tr·ªã',
    'S√≥c TrƒÉng',
    'S∆°n La',
    'T√¢y Ninh',
    'Th√°i B√¨nh',
    'Th√°i Nguy√™n',
    'Thanh H√≥a',
    'Th·ª´a Thi√™n Hu·∫ø',
    'Ti·ªÅn Giang',
    'TP H·ªì Ch√≠ Minh',
    'Tr√† Vinh',
    'Tuy√™n Quang',
    'Vƒ©nh Long',
    'Vƒ©nh Ph√∫c',
    'Y√™n B√°i',
  ];

  const propertyTypesByTab = {
    'nha-dat-ban': [
      {
        id: 'nha-mat-pho',
        label: 'Nh√† m·∫∑t ph·ªë',
      },
      {
        id: 'shophouse',
        label: 'Shophouse, nh√† ph·ªë th∆∞∆°ng m·∫°i',
      },
      {
        id: 'dat-ban',
        label: 'C√°c lo·∫°i ƒë·∫•t b√°n',
        icon: 'üèóÔ∏è'
      },
      {
        id: 'dat-nen',
        label: 'ƒê·∫•t n·ªÅn d·ª± √°n',
      },
      {
        id: 'ban-dat',
        label: 'B√°n ƒë·∫•t',
      },
      {
        id: 'trang-trai',
        label: 'Trang tr·∫°i, khu ngh·ªâ d∆∞·ª°ng',
        icon: 'üè°'
      },
      {
        id: 'condotel',
        label: 'Condotel',
      },
      {
        id: 'kho-xuong',
        label: 'Kho, nh√† x∆∞·ªüng',
        icon: 'üè≠'
      },
      {
        id: 'bat-dong-san-khac',
        label: 'B·∫•t ƒë·ªông s·∫£n kh√°c',
        icon: 'üè¢'
      }
    ],
    'nha-dat-cho-thue': [
      {
        id: 'can-ho-chung-cu',
        label: 'CƒÉn h·ªô chung c∆∞',
        icon: 'üè¢'
      },
      {
        id: 'nha-rieng',
        label: 'Nh√† ri√™ng',
        icon: 'üè†'
      },
      {
        id: 'nha-mat-pho',
        label: 'Nh√† m·∫∑t ph·ªë',
        icon: 'üè™'
      },
      {
        id: 'nha-tro-phong-tro',
        label: 'Nh√† tr·ªç, ph√≤ng tr·ªç',
        icon: 'üèòÔ∏è'
      },
      {
        id: 'van-phong',
        label: 'VƒÉn ph√≤ng',
        icon: 'üè¢'
      },
      {
        id: 'cua-hang',
        label: 'C·ª≠a h√†ng, ki ·ªët',
        icon: 'üè™'
      },
      {
        id: 'kho-xuong',
        label: 'Kho, x∆∞·ªüng',
        icon: 'üè≠'
      },
      {
        id: 'dat',
        label: 'ƒê·∫•t',
        icon: 'üèûÔ∏è'
      },
      {
        id: 'khac',
        label: 'Kh√°c',
        icon: 'üè¢'
      }
    ],
    'du-an': [
      {
        id: 'tat-ca-loai-hinh',
        label: 'T·∫•t c·∫£ lo·∫°i h√¨nh',
        icon: 'üè¢'
      },
      {
        id: 'can-ho-chung-cu',
        label: 'CƒÉn h·ªô chung c∆∞',
        icon: 'üè¢'
      },
      {
        id: 'cao-oc-van-phong',
        label: 'Cao ·ªëc vƒÉn ph√≤ng',
        icon: 'üè¢'
      },
      {
        id: 'trung-tam-thuong-mai',
        label: 'Trung t√¢m th∆∞∆°ng m·∫°i',
        icon: 'üè¨'
      },
      {
        id: 'khu-do-thi-moi',
        label: 'Khu ƒë√¥ th·ªã m·ªõi',
        icon: 'üåÜ'
      },
      {
        id: 'khu-phuc-hop',
        label: 'Khu ph·ª©c h·ª£p',
        icon: 'üèôÔ∏è'
      },
      {
        id: 'nha-o-xa-hoi',
        label: 'Nh√† ·ªü x√£ h·ªôi',
        icon: 'üèòÔ∏è'
      },
      {
        id: 'khu-nghi-duong',
        label: 'Khu ngh·ªâ d∆∞·ª°ng, Sinh th√°i',
        icon: 'üå≥'
      },
      {
        id: 'khu-cong-nghiep',
        label: 'Khu c√¥ng nghi·ªáp',
        icon: 'üè≠'
      }
    ]
  };

  const propertyTypes = propertyTypesByTab[activeTab as keyof typeof propertyTypesByTab];

  const priceOptions = [
    { value: "all", label: "T·∫•t c·∫£ m·ª©c gi√°" },
    { value: "0-500", label: "D∆∞·ªõi 500 tri·ªáu" },
    { value: "500-800", label: "500 - 800 tri·ªáu" },
    { value: "800-1000", label: "800 tri·ªáu - 1 t·ª∑" },
    { value: "1000-2000", label: "1 - 2 t·ª∑" },
  ];

  const areaOptions = [
    { value: "all", label: "T·∫•t c·∫£ di·ªán t√≠ch" },
    { value: "0-30", label: "D∆∞·ªõi 30 m¬≤" },
    { value: "30-50", label: "30 - 50 m¬≤" },
    { value: "50-80", label: "50 - 80 m¬≤" },
    { value: "80-100", label: "80 - 100 m¬≤" },
  ];

  const handleSearch = () => {
    console.log('Searching with:', { selectedCity, searchQuery });
  };

  const handlePropertyTypeChange = (propertyId: string) => {
    setSelectedPropertyTypes(prev => {
      if (prev.includes(propertyId)) {
        return prev.filter(id => id !== propertyId);
      } else {
        return [...prev, propertyId];
      }
    });
  };

  const handlePriceOptionChange = (value: string) => {
    setSelectedPriceOption(value);
    switch(value) {
      case "0-500":
        setMinPrice("");
        setMaxPrice("500");
        break;
      case "500-800":
        setMinPrice("500");
        setMaxPrice("800");
        break;
      case "800-1000":
        setMinPrice("800");
        setMaxPrice("1000");
        break;
      case "1000-2000":
        setMinPrice("1000");
        setMaxPrice("2000");
        break;
      default:
        setMinPrice("");
        setMaxPrice("");
    }
  };

  const handleAreaOptionChange = (value: string) => {
    setSelectedAreaOption(value);
    switch(value) {
      case "0-30":
        setMinArea("");
        setMaxArea("30");
        break;
      case "30-50":
        setMinArea("30");
        setMaxArea("50");
        break;
      case "50-80":
        setMinArea("50");
        setMaxArea("80");
        break;
      case "80-100":
        setMinArea("80");
        setMaxArea("100");
        break;
      default:
        setMinArea("");
        setMaxArea("");
    }
  };

  const newsByTab: NewsData = {
    'highlight': [
      {
        title: 'ƒê·∫•t D·ªãch V·ª• H√† N·ªôi TƒÉng Gi√° ƒê·∫ßu NƒÉm Nh∆∞ng Giao D·ªãch Ch·∫≠m',
        time: '6 gi·ªù tr∆∞·ªõc',
        img: '/images/news1.jpg',
        description: 'Th·ªã tr∆∞·ªùng b·∫•t ƒë·ªông s·∫£n ƒë·∫ßu nƒÉm ghi nh·∫≠n nhi·ªÅu bi·∫øn ƒë·ªông...'
      },
      {
        title: "ƒê·ª´ng ƒê·ªÉ 'S·ª•t B·∫´y' T·∫°i ƒêi·ªÉm N√≥ng ƒê·∫•t N·ªÅn ƒê√¥ng Anh",
        time: '8 gi·ªù tr∆∞·ªõc',
        img: '/images/news2.jpg'
      },
      {
        title: '6 Ch·ªâ B√°o C·ªßa Chuy√™n Gia V·ªÅ T·ª∑ Su·∫•t Cho Thu√™ Khi ƒê·∫ßu T∆∞ CƒÉn H·ªô',
        time: '1 ng√†y tr∆∞·ªõc',
        img: '/images/news3.jpg'
      },
      {
        title: 'ƒê·∫•t N·ªÅn ƒêan Ph∆∞·ª£ng N·ªïi S√≥ng ƒê·∫ßu NƒÉm 2025',
        time: '2 ng√†y tr∆∞·ªõc',
        img: '/images/news4.jpg'
      },
      {
        title: 'Nh·ªØng Lo·∫°i ƒê·∫•t N·ªÅn C·∫ßn Tr√°nh Xa Khi ƒê·∫ßu T∆∞',
        time: '2 ng√†y tr∆∞·ªõc',
        img: '/images/news5.jpg'
      },
    ],
    'news': [
      {
        title: 'Th·ªã Tr∆∞·ªùng BƒêS 2024: D·ª± B√°o v√† Tri·ªÉn V·ªçng',
        time: '1 gi·ªù tr∆∞·ªõc',
        img: '/images/news6.jpg',
        description: 'C√°c chuy√™n gia nh·∫≠n ƒë·ªãnh v·ªÅ tri·ªÉn v·ªçng th·ªã tr∆∞·ªùng BƒêS nƒÉm 2024...'
      },
      {
        title: 'Ch√≠nh S√°ch M·ªõi V·ªÅ Vay Mua Nh√† NƒÉm 2024',
        time: '3 gi·ªù tr∆∞·ªõc',
        img: '/images/news7.jpg'
      },
      {
        title: 'Top 5 D·ª± √Ån CƒÉn H·ªô ƒê∆∞·ª£c Quan T√¢m Nh·∫•t Th√°ng 2/2024',
        time: '5 gi·ªù tr∆∞·ªõc',
        img: '/images/news8.jpg'
      },
      {
        title: 'Xu H∆∞·ªõng ƒê·∫ßu T∆∞ BƒêS: CƒÉn H·ªô Du L·ªãch L√™n Ng√¥i',
        time: '1 ng√†y tr∆∞·ªõc',
        img: '/images/news9.jpg'
      },
    ],
    'bds-tphcm': [
      {
        title: 'Th·ªã Tr∆∞·ªùng CƒÉn H·ªô TP.HCM: Ngu·ªìn Cung Khan Hi·∫øm',
        time: '2 gi·ªù tr∆∞·ªõc',
        img: '/images/news10.jpg',
        description: 'Th·ªã tr∆∞·ªùng cƒÉn h·ªô TP.HCM ƒëang ƒë·ªëi m·∫∑t v·ªõi t√¨nh tr·∫°ng khan hi·∫øm ngu·ªìn cung...'
      },
      {
        title: 'Qu·∫≠n 9 S·∫Ω L√† T√¢m ƒêi·ªÉm BƒêS NƒÉm 2024',
        time: '4 gi·ªù tr∆∞·ªõc',
        img: '/images/news11.jpg'
      },
      {
        title: 'Gi√° Nh√† Ph·ªë Th∆∞∆°ng M·∫°i T·∫°i TP.HCM TƒÉng M·∫°nh',
        time: '1 ng√†y tr∆∞·ªõc',
        img: '/images/news12.jpg'
      },
      {
        title: 'C√°c D·ª± √Ån Metro T√°c ƒê·ªông ƒê·∫øn BƒêS TP.HCM',
        time: '2 ng√†y tr∆∞·ªõc',
        img: '/images/news13.jpg'
      },
    ],
    'bds-hanoi': [
      {
        title: 'Th·ªã Tr∆∞·ªùng BƒêS H√† N·ªôi Kh·ªüi S·∫Øc ƒê·∫ßu NƒÉm',
        time: '1 gi·ªù tr∆∞·ªõc',
        img: '/images/news14.jpg',
        description: 'Th·ªã tr∆∞·ªùng b·∫•t ƒë·ªông s·∫£n H√† N·ªôi ghi nh·∫≠n nh·ªØng t√≠n hi·ªáu t√≠ch c·ª±c...'
      },
      {
        title: 'Gi√° ƒê·∫•t N·ªÅn Khu V·ª±c Ho√†i ƒê·ª©c TƒÉng M·∫°nh',
        time: '5 gi·ªù tr∆∞·ªõc',
        img: '/images/news15.jpg'
      },
      {
        title: 'D·ª± √Ån ƒê∆∞·ªùng V√†nh ƒêai 4 T√°c ƒê·ªông BƒêS H√† N·ªôi',
        time: '1 ng√†y tr∆∞·ªõc',
        img: '/images/news16.jpg'
      },
      {
        title: 'Khu ƒê√¥ Th·ªã M·ªõi T√¢y H·ªì T√¢y Thu H√∫t Nh√† ƒê·∫ßu T∆∞',
        time: '2 ng√†y tr∆∞·ªõc',
        img: '/images/news17.jpg'
      },
    ],
  };

  const [activeNewsTab, setActiveNewsTab] = useState<keyof NewsData>('highlight');

  return (
    <>
      {/* Banner */}
      <div className='banner bg-[url(/banner.jpg)] bg-cover bg-center h-[500px] inset-0 w-auto relative'>
        <div className='banner__content top-[20px] absolute md:left-[20%] lg:left-[30%] left-[5%] text-center w-[90%] md:w-[70%] lg:w-[55%]'>
          <div className='search w-full'>
            <div className='search__tab'>
              <ul className='flex flex-wrap justify-start text-[#fff] text-sm md:text-base'>
                <li 
                  className={cn(
                    'mr-[5px] mb-2 md:mb-0 inset-0 bg-black/60 z-[99] transition-opacity duration-300 px-[10px] py-[5px] rounded-t-[5px] cursor-pointer hover:bg-black/80',
                    activeTab === 'nha-dat-ban' && 'bg-[#EF4444]/80 hover:bg-[#EF4444]'
                  )}
                  onClick={() => setActiveTab('nha-dat-ban')}
                >
                  Nh√† ƒë·∫•t b√°n
                </li>
                <li 
                  className={cn(
                    'mr-[5px] mb-2 md:mb-0 inset-0 bg-black/60 z-[99] transition-opacity duration-300 px-[10px] py-[5px] rounded-t-[5px] cursor-pointer hover:bg-black/80',
                    activeTab === 'nha-dat-cho-thue' && 'bg-[#EF4444]/80 hover:bg-[#EF4444]'
                  )}
                  onClick={() => setActiveTab('nha-dat-cho-thue')}
                >
                  Nh√† ƒë·∫•t cho thu√™
                </li>
                <li 
                  className={cn(
                    'mb-2 md:mb-0 inset-0 bg-black/60 z-[99] transition-opacity duration-300 px-[10px] py-[5px] rounded-t-[5px] cursor-pointer hover:bg-black/80',
                    activeTab === 'du-an' && 'bg-[#EF4444]/80 hover:bg-[#EF4444]'
                  )}
                  onClick={() => setActiveTab('du-an')}
                >
                  D·ª± √°n
                </li>
              </ul>
            </div>
            <div className='search__content bg-black/60 z-[99] transition-opacity duration-30 py-[30px] px-[15px]'>
              <div className='flex flex-col md:flex-row gap-2'>
                <div className='relative w-full md:w-auto'>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant='outline'
                        className='w-full md:w-[200px] justify-between bg-white text-gray-600 border-none h-full'
                      >
                        <div className='flex items-center gap-2'>
                          <IoLocationOutline className='w-4 h-4' />
                          <span className="truncate">{selectedCity || 'H·ªì Ch√≠ Minh'}</span>
                        </div>
                        <MdKeyboardArrowDown className='h-4 w-4 flex-shrink-0' />
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className='w-[90vw] md:w-[746px] p-0' align='start'>
                      <div className='grid'>
                        <div className='p-4'>
                          <h4 className='font-medium mb-2 text-sm text-gray-500'>Top t·ªânh th√†nh n·ªïi b·∫≠t</h4>
                          <div className='grid grid-cols-2 sm:grid-cols-3 md:grid-cols-6 gap-2'>
                            {featuredCities.map((city) => (
                              <div
                                key={city.name}
                                className='relative h-[70px] rounded-lg overflow-hidden cursor-pointer group'
                                onClick={() => {
                                  setSelectedCity(city.name);
                                  setShow(false);
                                }}
                              >
                                <img src={city.image} alt={city.name} className='w-full h-full object-cover' />
                                <div className='absolute inset-0 bg-black/40 group-hover:bg-black/50 transition-all'>
                                  <span className='absolute bottom-2 left-2 text-white font-medium text-sm'>{city.name}</span>
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                        <div className='border-t'>
                          <div className='p-4'>
                            <h4 className='font-medium mb-1 text-sm text-gray-500'>T·∫•t c·∫£ t·ªânh th√†nh</h4>
                            <div className='grid grid-cols-2 sm:grid-cols-3 md:grid-cols-6'>
                              {allCities.map((city) => (
                                <div
                                  key={city}
                                  className='py-[3px] px-3 hover:bg-gray-100 cursor-pointer rounded text-[13px] text-black'
                                  onClick={() => {
                                    setSelectedCity(city);
                                    setShow(false);
                                  }}
                                >
                                  {city}
                                </div>
                              ))}
                            </div>
                          </div>
                        </div>
                      </div>
                    </PopoverContent>
                  </Popover>
                </div>
                <div className='flex relative w-full bg-white rounded-[5px]'>
                  <Input
                    className='block w-full p-[15px] border-none'
                    placeholder='Nh·∫≠p t·ªëi ƒëa 5 ƒë·ªãa ƒëi·ªÉm, d·ª± √°n.'
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                  />
                  <Button
                    className='absolute right-[10px] top-[8px] bg-[#EF4444] hover:bg-[#FF837A]'
                    onClick={handleSearch}
                  >
                    <span className="hidden md:inline">T√¨m ki·∫øm</span>
                    <IoIosSearch className="w-4 h-4 md:hidden" />
                  </Button>
                </div>
              </div>

              <div className='flex flex-col sm:flex-row gap-2 mt-2'>
                <Popover open={showPropertyTypes} onOpenChange={setShowPropertyTypes}>
                  <PopoverTrigger asChild>
                    <Button
                      variant='outline'
                      className='w-full sm:w-[33%] justify-between bg-white text-gray-600 border-none'
                    >
                      <span className="text-sm truncate">Lo·∫°i h√¨nh d·ª± √°n</span>
                      <MdKeyboardArrowDown className='h-4 w-4 flex-shrink-0' />
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className='w-[90vw] sm:w-[300px] p-0' align='start'>
                    <div className='p-4'>
                      <div className='flex items-center justify-between mb-4'>
                        <h4 className='font-medium text-base'>Lo·∫°i nh√† ƒë·∫•t</h4>
                        <Button 
                          variant="ghost" 
                          size="icon"
                          className='h-6 w-6'
                          onClick={() => setShowPropertyTypes(false)}
                        >
                          <X className='h-4 w-4' />
                        </Button>
                      </div>
                      <div className='space-y-3'>
                        {propertyTypes.map((type) => (
                          <div key={type.id} className='flex items-center space-x-2'>
                            <Checkbox
                              id={type.id}
                              checked={selectedPropertyTypes.includes(type.id)}
                              onCheckedChange={() => handlePropertyTypeChange(type.id)}
                            />
                            <label
                              htmlFor={type.id}
                              className='text-sm leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'
                            >
                              {type.icon && <span className="mr-2">{type.icon}</span>}
                              {type.label}
                            </label>
                          </div>
                        ))}
                      </div>
                      <div className='flex gap-2 mt-4 border-t pt-4'>
                        <Button 
                          variant="outline" 
                          className='flex-1'
                          onClick={() => {
                            setSelectedPropertyTypes([]);
                            setShowPropertyTypes(false);
                          }}
                        >
                          ƒê·∫∑t l·∫°i
                        </Button>
                        <Button 
                          className='flex-1 bg-[#EF4444] hover:bg-[#FF837A]'
                          onClick={() => setShowPropertyTypes(false)}
                        >
                          √Åp d·ª•ng
                        </Button>
                      </div>
                    </div>
                  </PopoverContent>
                </Popover>

                <Popover open={showPriceFilter} onOpenChange={setShowPriceFilter}>
                  <PopoverTrigger asChild>
                    <Button
                      variant='outline'
                      className='w-full sm:w-[33%] justify-between bg-white text-gray-600 border-none'
                    >
                      <span className="text-sm truncate">M·ª©c gi√°</span>
                      <MdKeyboardArrowDown className='h-4 w-4 flex-shrink-0' />
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className='w-[90vw] sm:w-[300px] p-0' align='start'>
                    <div className='p-4'>
                      <div className='flex items-center justify-between mb-4'>
                        <h4 className='font-medium text-base'>M·ª©c gi√°</h4>
                        <Button 
                          variant="ghost" 
                          size="icon"
                          className='h-6 w-6'
                          onClick={() => setShowPriceFilter(false)}
                        >
                          <X className='h-4 w-4' />
                        </Button>
                      </div>

                      <div className="mb-6">
                        <div className="flex justify-between mb-2">
                          <span className="text-sm font-medium">Gi√° th·∫•p nh·∫•t</span>
                          <span className="text-sm font-medium">Gi√° cao nh·∫•t</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <Input
                            type="text"
                            placeholder="T·ª´"
                            value={minPrice}
                            onChange={(e) => setMinPrice(e.target.value)}
                            className="flex-1"
                          />
                          <span>‚Üí</span>
                          <Input
                            type="text"
                            placeholder="ƒê·∫øn"
                            value={maxPrice}
                            onChange={(e) => setMaxPrice(e.target.value)}
                            className="flex-1"
                          />
                        </div>
                        <div className="mt-4">
                          <Slider
                            defaultValue={[0, 2000]}
                            max={2000}
                            step={100}
                            value={[parseInt(minPrice || "0"), parseInt(maxPrice || "2000")]}
                            onValueChange={(value) => {
                              setMinPrice(value[0].toString());
                              setMaxPrice(value[1].toString());
                              setSelectedPriceOption("");
                            }}
                            className="[&_.bg-\[\#EF4444\]]:bg-[#00B4D8]"
                          />
                        </div>
                      </div>

                      <RadioGroup 
                        value={selectedPriceOption} 
                        onValueChange={handlePriceOptionChange}
                        className="space-y-2"
                      >
                        {priceOptions.map((option) => (
                          <div key={option.value} className="flex items-center space-x-2">
                            <RadioGroupItem value={option.value} id={option.value} className="text-[#00B4D8] border-[#00B4D8]" />
                            <label htmlFor={option.value} className="text-sm">
                              {option.label}
                            </label>
                          </div>
                        ))}
                      </RadioGroup>

                      <div className='flex gap-2 mt-4 border-t pt-4'>
                        <Button 
                          variant="outline" 
                          className='flex-1'
                          onClick={() => {
                            setMinPrice("");
                            setMaxPrice("");
                            setSelectedPriceOption("all");
                          }}
                        >
                          ƒê·∫∑t l·∫°i
                        </Button>
                        <Button 
                          className='flex-1 bg-[#EF4444] hover:bg-[#FF837A]'
                          onClick={() => setShowPriceFilter(false)}
                        >
                          √Åp d·ª•ng
                        </Button>
                      </div>
                    </div>
                  </PopoverContent>
                </Popover>

                <Popover open={showAreaFilter} onOpenChange={setShowAreaFilter}>
                  <PopoverTrigger asChild>
                    <Button
                      variant='outline'
                      className='w-full sm:w-[33%] justify-between bg-white text-gray-600 border-none'
                    >
                      <span className="text-sm truncate">Di·ªán t√≠ch</span>
                      <MdKeyboardArrowDown className='h-4 w-4 flex-shrink-0' />
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className='w-[90vw] sm:w-[300px] p-0' align='start'>
                    <div className='p-4'>
                      <div className='flex items-center justify-between mb-4'>
                        <h4 className='font-medium text-base'>Di·ªán t√≠ch</h4>
                        <Button 
                          variant="ghost" 
                          size="icon"
                          className='h-6 w-6'
                          onClick={() => setShowAreaFilter(false)}
                        >
                          <X className='h-4 w-4' />
                        </Button>
                      </div>

                      <div className="mb-6">
                        <div className="flex justify-between mb-2">
                          <span className="text-sm font-medium">Di·ªán t√≠ch nh·ªè nh·∫•t</span>
                          <span className="text-sm font-medium">Di·ªán t√≠ch l·ªõn nh·∫•t</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <Input
                            type="text"
                            placeholder="T·ª´"
                            value={minArea}
                            onChange={(e) => setMinArea(e.target.value)}
                            className="flex-1"
                          />
                          <span>‚Üí</span>
                          <Input
                            type="text"
                            placeholder="ƒê·∫øn"
                            value={maxArea}
                            onChange={(e) => setMaxArea(e.target.value)}
                            className="flex-1"
                          />
                        </div>
                        <div className="mt-4">
                          <Slider
                            defaultValue={[0, 100]}
                            max={100}
                            step={5}
                            value={[parseInt(minArea || "0"), parseInt(maxArea || "100")]}
                            onValueChange={(value) => {
                              setMinArea(value[0].toString());
                              setMaxArea(value[1].toString());
                              setSelectedAreaOption("");
                            }}
                          />
                        </div>
                      </div>

                      <RadioGroup 
                        value={selectedAreaOption} 
                        onValueChange={handleAreaOptionChange}
                        className="space-y-2"
                      >
                        {areaOptions.map((option) => (
                          <div key={option.value} className="flex items-center space-x-2">
                            <RadioGroupItem value={option.value} id={option.value} className="text-[#00B4D8] border-[#00B4D8]" />
                            <label htmlFor={option.value} className="text-sm">
                              {option.label}
                            </label>
                          </div>
                        ))}
                      </RadioGroup>

                      <div className='flex gap-2 mt-4 border-t pt-4'>
                        <Button 
                          variant="outline" 
                          className='flex-1'
                          onClick={() => {
                            setMinArea("");
                            setMaxArea("");
                            setSelectedAreaOption("all");
                          }}
                        >
                          ƒê·∫∑t l·∫°i
                        </Button>
                        <Button 
                          className='flex-1 bg-[#EF4444] hover:bg-[#FF837A]'
                          onClick={() => setShowAreaFilter(false)}
                        >
                          √Åp d·ª•ng
                        </Button>
                      </div>
                    </div>
                  </PopoverContent>
                </Popover>
              </div>
            </div>
          </div>
        </div>
      </div>
      {/* Banner */}

      {/* News */}
      <div className='max-w-4xl mx-auto p-4'>
        <Tabs value={activeNewsTab} onValueChange={(value: keyof NewsData) => setActiveNewsTab(value)}>
          <div className="flex items-center justify-between">
            <TabsList className='mb-4 border-b flex flex-wrap gap-2 md:gap-4'>
              <TabsTrigger 
                value='highlight' 
                className={cn(
                  'font-semibold border-b-2 transition-colors',
                  activeNewsTab === 'highlight' ? 'border-red-500 text-red-500' : 'border-transparent'
                )}
              >
                Tin n·ªïi b·∫≠t
              </TabsTrigger>
              <TabsTrigger 
                value='news'
                className={cn(
                  'font-semibold border-b-2 transition-colors',
                  activeNewsTab === 'news' ? 'border-red-500 text-red-500' : 'border-transparent'
                )}
              >
                Tin t·ª©c
              </TabsTrigger>
              <TabsTrigger 
                value='bds-tphcm'
                className={cn(
                  'font-semibold border-b-2 transition-colors',
                  activeNewsTab === 'bds-tphcm' ? 'border-red-500 text-red-500' : 'border-transparent'
                )}
              >
                BƒêS TPHCM
              </TabsTrigger>
              <TabsTrigger 
                value='bds-hanoi'
                className={cn(
                  'font-semibold border-b-2 transition-colors',
                  activeNewsTab === 'bds-hanoi' ? 'border-red-500 text-red-500' : 'border-transparent'
                )}
              >
                BƒêS H√† N·ªôi
              </TabsTrigger>
            </TabsList>
            <Button variant='link' className='text-red-500'>
              Xem th√™m ‚Üí
            </Button>
          </div>

          <TabsContent value={activeNewsTab} className="mt-4">
            <div className='grid grid-cols-1 md:grid-cols-3 gap-4'>
              <Card className='col-span-1 md:col-span-2 border-none shadow-none'>
                <div className='relative h-48 rounded-lg overflow-hidden'>
                  <img 
                    src={newsByTab[activeNewsTab][0].img} 
                    alt={newsByTab[activeNewsTab][0].title}
                    className='w-full h-full object-cover transition-transform hover:scale-105'
                  />
                </div>
                <CardContent className='mt-2 px-0'>
                  <h3 className='text-lg font-semibold hover:text-red-500 cursor-pointer transition-colors'>
                    {newsByTab[activeNewsTab][0].title}
                  </h3>
                  <p className='text-gray-500 text-sm flex items-center mt-1'>
                    ‚è≥ {newsByTab[activeNewsTab][0].time}
                  </p>
                  {newsByTab[activeNewsTab][0].description && (
                    <p className='text-gray-600 mt-2 text-sm line-clamp-2'>
                      {newsByTab[activeNewsTab][0].description}
                    </p>
                  )}
                </CardContent>
              </Card>

              <div className='space-y-3'>
                {newsByTab[activeNewsTab].slice(1).map((item: NewsItem, index: number) => (
                  <div 
                    key={index} 
                    className='border-b pb-2 last:border-none hover:bg-gray-50 transition-colors rounded p-2 cursor-pointer'
                  >
                    <h4 className='text-sm font-semibold hover:text-red-500 transition-colors'>
                      {item.title}
                    </h4>
                    <p className='text-gray-500 text-xs flex items-center mt-1'>
                      ‚è≥ {item.time}
                    </p>
                  </div>
                ))}
              </div>
            </div>
          </TabsContent>
        </Tabs>

        <Button className='fixed bottom-4 right-4 p-3 rounded-full bg-gray-800 text-white shadow-lg'>
          <MessageSquare size={20} />
        </Button>
      </div>
      {/* News */}
    </>
  );
}

export default Home;
